<% var keys = Object.keys(deps); %>
<% var values = keys.map(function(key) { return deps[key]; }); %>

def('min', [ <%-values.map(function(dep) { return "'" + dep + "'"; }).join(',')%> ], function(require, exports, module) {

  if ('undefined' !== typeof define && define.amd) {
    <% keys.forEach(function(dep, index) { %>
    var <%=dep%> = arguments[<%=index%>];
    <% }); %>
  } else {
    <% keys.forEach(function(dep, index) { %>
    var <%=dep%> = require('<%=values[index]%>');
    <% }); %>
  }

  var Promise = events.Promise;

  var min = {};
  utils.extend(min, new events.EventEmitter());

  // Default Store Interfaces
  function memStore () {}
  memStore.prototype.get = function(key) {
    if (sessionStorage) {
      return sessionStorage.getItem(key);
    } else {
      return false;
    }
  };
  memStore.prototype.set = function(key, value) {
    if (sessionStorage) {
      return sessionStorage.setItem(key, value);
    } else {
      return false;
    }
  };
  memStore.prototype.remove = function(key) {
    if (sessionStorage) {
      return sessionStorage.removeItem(key);
    } else {
      return false;
    }
  };

  function localStore () {}
  localStore.prototype.get = function(key) {
    if (localStorage) {
      return localStorage.getItem(key);
    } else {
      return false;
    }
  };
  localStore.prototype.set = function(key, value) {
    if (localStorage) {
      return localStorage.setItem(key, value);
    } else {
      return false;
    }
  };
  localStore.prototype.remove = function(key) {
    if (localStorage) {
      return localStorage.removeItem(key);
    } else {
      return false;
    }
  };

  min.memStore = memStore;
  min.localStore = localStore;

  // Default StoreInterface
  min.store = new min.localStore();

  // Default variables
  var _keys = min._keys = {};
  var _keysTimer = null;
  var _types = {
    0 : 'mix',
    1 : 'hash',
    2 : 'list',
    3 : 'set',
    4 : 'zset'  // Sorted Set
  };

    /**
   * Fork a new MinDB object
   * @return {Object} new min object
   */
  min.fork = function() {
    var rtn = {};
    var self = this;

    for (var prop in this) {
      if (this.hasOwnProperty(prop)) {
        rtn[prop] = this[prop];
      }
    }

    return rtn;
  };

  /*********
  ** Keys **
  *********/

  /**
   * Delete a key
   * @param  {String}   key      Key
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.del = function(key, callback) {
    var self = this;

    // Promise Object
    var promise = new Promise(function() {
      self.emit('del', key);
      if (_keysTimer) {
        clearTimeout(_keysTimer);
      }

      _keysTimer = setTimeout(self.save.bind(self), 5 * 1000);
    });

    // Store
    var store = this.store;

    // Callback and Promise's shim
    if ('undefined' == typeof callback) {
      callback = utils.noop;
    }

    // Key prefix
    var $key = 'min-' + key;

    if (store.async) {
      // Async Store Operating
      
      var load = function() {
        // Value processing
        store.remove($key, function(err) {
          if (err) {
            // Error!
            promise.reject(err);
            return callback(err);
          }

          delete self._keys[key];

          // Done
          promise.resolve(key);
          callback(null, key);
        });
      };

      if (store.ready) {
        load();
      } else {
        store.on('ready', load);
      }
    } else {
      try {
        store.remove($key);

        delete self._keys[key];

        // Done
        promise.resolve(key);
        callback(null, key);
      } catch(err) {
        // Error!
        promise.reject(err);
        callback(err);
      }
    }

    // Event emitting
    this.emit('del', key);

    return promise;
  };

  /**
   * Check a key is exists or not
   * @param  {String}   key      Key
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.exists = function(key, callback) {
    // Promise Object
    var promise = new Promise();

    callback = callback || utils.noop;

    try {
      this.get(key, function(err, value) {
        if (err) {
          promise.resolve(false);
          callback(null, false);
        }

        if ('undefined' == typeof value) {
          promise.resolve(false);
          return callback(null, false);
        } else {
          promise.resolve(true);
          return callback(null, true);
        }
      });
    } catch(err) {
      promise.reject(err);
      return callback(err);
    }

    return promise;
  };

  /**
   * Rename a old key
   * @param  {String}   key      the old key
   * @param  {String}   newKey   the new key
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.renamenx = function(key, newKey, callback) {
    var self = this;

    // Promise object
    var promise = new Promise(function() {
      if (_keysTimer) {
        clearTimeout(_keysTimer);
      }

      _keysTimer = setTimeout(self.save.bind(self), 5 * 1000);
    });

    // Callback and Promise's shim
    if ('undefined' == typeof callback) {
      callback = utils.noop;
    }

    try {
      // Error handle
      var reject = function(err) {
        promise.reject(err);
        callback(err);
      };

      var type = null;
      var value = null;

      min.exists(key)
        .then(function(exists) {
          if (!exists) {
            var err = new Error('no such key');

            reject(err);
          } else {
            return min.get(key);
          }
        })
        .then(function(_value) {
          type = self._keys[key];
          value = _value;

          return min.del(key);
        })
        .then(function() {
          return min.set(newKey, value, callback);
        })
        .then(function() {
          self._keys[newKey] = type;
          promise.resolve('OK');
          callback(null, 'OK');
        })
        .fail(reject);

    } catch(err) {
      reject(err);
    }

    return promise;
  };

  /**
   * Rename a old key when the old key is not equal to the new key
   * and the old key is exiest.
   * @param  {String}   key      the old key
   * @param  {String}   newKey   the new key
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.rename = function(key, newKey, callback) {
    var self = this;
    // Promise object
    var promise = new Promise(function() {
      if (_keysTimer) {
        clearTimeout(_keysTimer);
      }

      _keysTimer = setTimeout(self.save.bind(self), 5 * 1000);
    });

    // Error handle
    var reject = function(err) {
      promise.reject(err);
      callback(err);
    };
    
    // Callback and Promise's shim
    if ('undefined' == typeof callback) {
      callback = utils.noop;
    }

    if (key == newKey) {
      // The origin key is equal to the new key
      reject(new Error('The key is equal to the new key.'));
    } else {
      self.renamenx.apply(self, arguments)
        .then(promise.resolve.bind(promise))
        .fail(promise.reject.bind(promise));
    }
    return promise;
  };

  /**
   * Return the keys which match by the pattern
   * @param  {String}   pattern  Pattern
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.keys = function(pattern, callback) {

    // Promise object
    var promise = new Promise();

    // Stored keys
    var keys = Object.keys(this._keys);

    // Callback and Promise's shim
    callback = callback || utils.noop;

    // Filter
    var filter = pattern
      .replace('?', '(.)')
      .replace('*', '(.*)');
    filter = new RegExp(filter);

    var ret = [];

    for (var i = 0; i < keys.length; i++) {
      if (keys[i].match(filter)) {
        ret.push(keys[i]);
      }
    }

    // Done
    promise.resolve(ret);
    callback(null, ret);

    return promise;
  };

  /**
   * Return a key randomly
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.randomkey = function(callback) {
    
    // Promise Object
    var promise = new Promise();

    // Stored keys
    var keys = Object.keys(this._keys);

    // Callback and Promise's shim
    if ('undefined' == typeof callback) {
      callback = utils.noop;
    }

    // Random Key
    var index = Math.round(Math.random() * (keys.length - 1));

    // Done
    var $key = keys[index];
    promise.resolve($key);
    callback(null, $key);

    return promise;
  };

  /**
   * Return the value's type of the key
   * @param  {String}   key      the key
   * @param  {Function} callback Callback
   * @return {Promise}           Promise Object
   */
  min.type = function(key, callback) {

    // Promise Object
    var promise = new Promise();

    // Callback and Promise's shim
    callback = callback || utils.noop;

    if (this._keys.hasOwnProperty(key)) {
      promise.resolve(_types[this._keys[key]]);
      callback(null, callback);
    } else {
      promise.resolve(null);
      callback(null, null);
    }

    return promise;
  };

  /**
   * Remove all keys in the db
   * @param  {Function} callback Callback
   * @return {Object}            min
   */
  min.empty = function(callback) {
    var self = this;
    var promise = new Promise(function(len) {
      self.emit('empty', len);
      if (_keysTimer) {
        clearTimeout(_keysTimer);
      }

      _keysTimer = setTimeout(self.save.bind(self), 5 * 1000);
    });
    var keys = Object.keys(this._keys);
    var last = null;
    var removeds = 0;
    callback = callback || utils.noop;

    (function loop(key) {
      if (key) {
        self.del(key, function(err) {
          if (!err) {
            removeds++;
          }

          loop(keys.shift());
        });
      } else {
        promise.resolve(removeds);
        callback(null, removeds);
      }
    })(keys.shift());

    return promise;
  };

  /**
   * Save the dataset to the Store Interface manually
   * @param  {Function} callback callback
   * @return {Promise}           promise
   */
  min.save = function(callback) {
    var self = this;
    var promise = new Promise(function(dump, strResult) {
      self.emit('save', dump, strResult);
    });
    callback = callback || utils.noop;

    self.set('min_keys', JSON.stringify(self._keys))
      .then(function() {
        return self.dump();
      })
      .then(function(dump, strResult) {
        promise.resolve(dump, strResult);
        callback(dump, strResult);
      })
      .fail(function(err) {
        promise.reject(err);
        callback(err);
      });

    return promise;
  };

  /**
   * Return the dataset of MinDB
   * @param  {Function} callback callback
   * @return {Promise}           promise
   */
  min.dump = function(callback) {
    var self = this;
    var promise = new Promise();
    callback = callback || utils.noop;

    var rtn = {};

    self.keys('*')
      .then(function(keys) {
        (function loop(key) {
          if (key) {
            self.get(key)
              .then(function(value) {
                rtn[key] = value;
                loop(keys.shift());
              })
              .fail(function(err) {
                promise.reject(err);
                callback(err);
              });
          } else {
            var strResult = JSON.stringify(rtn);
            promise.resolve(rtn, strResult);
            callback(null, rtn, strResult);
          }
        })(keys.shift());
      })
      .fail(function(err) {
        promise.reject(err);
        callback(err);
      });

    return promise;
  };

  /**
   * Restore the dataset to MinDB
   * @param  {Object}   dump     dump object
   * @param  {Function} callback callback
   * @return {Promise}           promise
   */
  min.restore = function(dump, callback) {
    var self = this;
    var promise = new Promise(function() {
      self.save(function() {
        self.emit('restore');
      });
    });
    callback = callback || utils.noop;

    var keys = Object.keys(dump);

    (function loop(key, done) {
      if (key) {
        self.set(key, dump[key])
          .then(function() {
            loop(keys.shift(), done);
          })
          .fail(function(err) {
            promise.reject(err);
            callback(err);
          });
      } else {
        done();
      }
    })(keys.shift(), function() {
      self
        .exists('min_keys')
        .then(function(exists) {
          if (exists) {
            return self.get('min_keys');
          } else {
            promise.resolve();
            callback();
          }
        })
        .then(function(keys) {
          _keys = JSON.parse(keys);

          promise.resolve();
          callback();
        });
    });

    return promise;
  };

  // Methods
  <% keys.forEach(function(dep, index) { %>
  utils.extend(min, <%=dep%>);
  <% }); %>

  // Apply
  min.exists('min_keys')
    .then(function(exists) {
      if (exists) {
        return min.get('min_keys');
      }
    })
    .then(function(keys) {
      min._keys = JSON.parse(keys);
    });

  return min;
});